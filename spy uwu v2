-- Player Tools FIXED: Rayfield (Ocean) + fallback, JumpPower fixed, Freeze hard, Screen color, Fly/Marchub/Fling loaders
-- Ejecutar como LocalScript (StarterPlayerScripts o StarterGui)

-- Services
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local Lighting = game:GetService("Lighting")
local Workspace = workspace
local LocalPlayer = Players.LocalPlayer

-- State
local walking, tweening, spectating = false, false, false
local stopAll = false
local noclipEnabled = false
local noclipConnection = nil
local tweenConnection = nil
local originalCollides = {}

-- Freeze state
local frozenState = false
local freezeBackup = {}
local frozenCFrame = nil
local frozenConnection = nil

-- Simplify store
local simplifiedStore = {particles = {}, effects = {}}

-- Helpers
local function safeDisconnect(c)
    if c then
        pcall(function()
            if type(c.Disconnect) == "function" then c:Disconnect() end
        end)
    end
end

local function findPlayer(name)
    if not name or name == "" then return nil end
    name = tostring(name):lower()
    local best, maxMatch = nil, -1
    for _, p in pairs(Players:GetPlayers()) do
        local n = (p.Name or ""):lower()
        local d = (p.DisplayName or ""):lower()
        local match = 0
        for i = 1, #name do
            if n:sub(i,i) == name:sub(i,i) or d:sub(i,i) == name:sub(i,i) then match = match + 1 end
        end
        if match > maxMatch then maxMatch, best = match, p end
    end
    return best
end

-- Screen color utilities
local function createColorGui()
    local pg = LocalPlayer:WaitForChild("PlayerGui")
    local sg = pg:FindFirstChild("PlayerTools_ScreenColor")
    if sg then
        return sg, sg:FindFirstChild("ColorFrame")
    end
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "PlayerTools_ScreenColor"
    screenGui.ResetOnSpawn = false
    screenGui.Parent = pg

    local frame = Instance.new("Frame")
    frame.Name = "ColorFrame"
    frame.Size = UDim2.new(1,0,1,0)
    frame.Position = UDim2.new(0,0,0,0)
    frame.BackgroundTransparency = 0
    frame.Visible = false
    frame.ZIndex = 9999
    frame.Parent = screenGui

    return screenGui, frame
end

-- Movement funcs
local function walkToPlayer(targetPlayer, speed)
    if not targetPlayer or not targetPlayer.Character then return end
    local hrp = targetPlayer.Character:FindFirstChild("HumanoidRootPart")
    if not hrp then return end
    local char = LocalPlayer.Character
    if not char then return end
    local humanoid = char:FindFirstChildOfClass("Humanoid")
    local root = char:FindFirstChild("HumanoidRootPart")
    if not humanoid or not root then return end

    local originalSpeed = humanoid.WalkSpeed
    -- prefer speed argument; if nil use pathSlider (created later) or default 16
    local desired = tonumber(speed) or (pathSlider and tonumber(pathSlider.CurrentValue)) or 16
    pcall(function() humanoid.WalkSpeed = desired end)

    walking = true
    stopAll = false

    local conn
    coroutine.wrap(function()
        while walking and not stopAll and targetPlayer and targetPlayer.Character and targetPlayer.Character:FindFirstChild("HumanoidRootPart") do
            -- ensure desired speed enforced each loop (server corrections happen, we reapply)
            pcall(function() humanoid.WalkSpeed = desired end)

            local targetPos = targetPlayer.Character.HumanoidRootPart.Position
            humanoid:MoveTo(targetPos)

            local reached = false
            conn = humanoid.MoveToFinished:Connect(function(r) reached = r end)
            while walking and not stopAll and not reached do
                RunService.Heartbeat:Wait()
                if (root.Position - targetPos).Magnitude <= 3 then reached = true end
            end
            if conn then conn:Disconnect(); conn = nil end
            task.wait(0.05)
        end

        walking = false
        if humanoid and humanoid.Parent then
            pcall(function() humanoid.WalkSpeed = originalSpeed end)
        end
    end)()
end

-- tween that allows jumping: moves only X/Z and preserves Y (so jump works)
local function tweenToAllowJump(targetPos, speed)
    if not targetPos then return end
    if not LocalPlayer.Character then return end
    local root = LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
    if not root then return end

    tweening = true
    local s = tonumber(speed) or (tweenSlider and tonumber(tweenSlider.CurrentValue)) or 220

    safeDisconnect(tweenConnection)
    tweenConnection = RunService.RenderStepped:Connect(function(dt)
        if not tweening or stopAll or not root or not root.Parent then
            safeDisconnect(tweenConnection)
            tweenConnection = nil
            return
        end

        -- horizontal direction (ignore Y)
        local dir = targetPos - root.Position
        local dirXZ = Vector3.new(dir.X, 0, dir.Z)
        local distXZ = dirXZ.Magnitude

        if distXZ <= 1 then
            tweening = false
            safeDisconnect(tweenConnection)
            tweenConnection = nil
            return
        end

        -- step horizontally, preserve Y velocity/position
        local step = math.min(s * dt, distXZ)
        if dirXZ.Magnitude > 0 then
            local moveVec = dirXZ.Unit * step
            local newPos = root.Position + Vector3.new(moveVec.X, 0, moveVec.Z)
            -- preserve Y when setting CFrame
            local currentY = root.Position.Y
            local desiredY = currentY -- keep current Y; jumping will change this between frames
            -- compute rotation facing direction horizontally
            local lookAt = Vector3.new(dir.X, 0, dir.Z)
            if lookAt.Magnitude > 0.001 then
                root.CFrame = CFrame.new(Vector3.new(newPos.X, desiredY, newPos.Z), Vector3.new(newPos.X, desiredY, newPos.Z) + lookAt.Unit)
            else
                root.CFrame = CFrame.new(Vector3.new(newPos.X, desiredY, newPos.Z), Vector3.new(newPos.X, desiredY, newPos.Z) + root.CFrame.LookVector)
            end
        end
    end)
end

-- wrapper to keep old name compatibility
local function tweenTo(targetPos, speed)
    return tweenToAllowJump(targetPos, speed)
end

local function stopEverything()
    stopAll = true
    walking = false
    tweening = false
    spectating = false

    local char = LocalPlayer.Character
    if char then
        local humanoid = char:FindFirstChildOfClass("Humanoid")
        local root = char:FindFirstChild("HumanoidRootPart")
        if humanoid and root then
            pcall(function() humanoid:MoveTo(root.Position) end)
            pcall(function() humanoid.WalkSpeed = 16 end)
            pcall(function() humanoid.PlatformStand = false end)
        end
    end

    safeDisconnect(tweenConnection)
    tweenConnection = nil

    -- restore camera
    if Workspace.CurrentCamera and LocalPlayer.Character and LocalPlayer.Character:FindFirstChildOfClass("Humanoid") then
        Workspace.CurrentCamera.CameraSubject = LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
        Workspace.CurrentCamera.CameraType = Enum.CameraType.Custom
    end
end

-- Noclip
local function setNoclip(state)
    noclipEnabled = state
    safeDisconnect(noclipConnection)
    noclipConnection = nil
    local char = LocalPlayer.Character
    if not char then return end
    if noclipEnabled then
        originalCollides = {}
        for _, part in pairs(char:GetDescendants()) do
            if part:IsA("BasePart") then
                originalCollides[part] = part.CanCollide
                pcall(function() part.CanCollide = false end)
            end
        end
        noclipConnection = RunService.Stepped:Connect(function()
            if LocalPlayer.Character then
                for part,_ in pairs(originalCollides) do
                    if part and part.Parent then pcall(function() part.CanCollide = false end) end
                end
            end
        end)
    else
        for part, stateCol in pairs(originalCollides) do
            if part and part.Parent then pcall(function() part.CanCollide = stateCol end) end
        end
        originalCollides = {}
    end
end

-- Freeze (hard): keep HRP at storedCFrame + zero velocities and PlatformStand true
local function setFreeze(enable)
    local char = LocalPlayer.Character
    if not char then return end
    local hum = char:FindFirstChildOfClass("Humanoid")
    local root = char:FindFirstChild("HumanoidRootPart")
    if not hum or not root then return end

    if enable then
        if frozenState then return end
        -- backup
        freezeBackup.walkspeed = hum.WalkSpeed
        freezeBackup.jumpPower = hum.JumpPower
        freezeBackup.platformStand = hum.PlatformStand
        freezeBackup.autoRotate = hum.AutoRotate
        freezeBackup.anchored = root.Anchored
        -- store cframe
        frozenCFrame = root.CFrame
        -- enforce
        pcall(function() hum.UseJumpPower = true end)
        pcall(function()
            hum.WalkSpeed = 0
            hum.JumpPower = 0
            hum.PlatformStand = true
            hum.AutoRotate = false
        end)
        -- aggressively keep position and zero velocity
        safeDisconnect(frozenConnection)
        frozenConnection = RunService.RenderStepped:Connect(function()
            if not LocalPlayer.Character then return end
            local r = LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
            local h = LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
            if r and frozenCFrame then
                pcall(function()
                    -- zero velocities and snap position; keep Y component equal to frozenCFrame.Y to fully freeze
                    r.AssemblyLinearVelocity = Vector3.new(0,0,0)
                    r.Velocity = Vector3.new(0,0,0)
                    r.CFrame = frozenCFrame
                end)
            end
            if h then
                pcall(function() h.PlatformStand = true end)
            end
        end)
        frozenState = true
    else
        if not frozenState then return end
        safeDisconnect(frozenConnection)
        frozenConnection = nil
        pcall(function()
            if hum then
                hum.PlatformStand = freezeBackup.platformStand or false
                hum.AutoRotate = (freezeBackup.autoRotate == nil) and true or freezeBackup.autoRotate
                hum.WalkSpeed = freezeBackup.walkspeed or 16
                pcall(function() hum.UseJumpPower = true end)
                hum.JumpPower = freezeBackup.jumpPower or 50
            end
            if root and freezeBackup.anchored ~= nil then
                root.Anchored = freezeBackup.anchored
            end
        end)
        frozenState = false
        freezeBackup = {}
        frozenCFrame = nil
    end
end

-- Simplify for FPS
local function setSimplify(enable)
    if enable then
        simplifiedStore.particles = {}
        for _, obj in pairs(Workspace:GetDescendants()) do
            if obj:IsA("ParticleEmitter") or obj:IsA("Trail") or obj:IsA("Sparkles") or obj:IsA("Smoke") or obj:IsA("Fire") then
                table.insert(simplifiedStore.particles, obj)
                pcall(function() obj.Enabled = false end)
            end
        end
        simplifiedStore.globalShadows = Lighting.GlobalShadows
        pcall(function() Lighting.GlobalShadows = false end)
    else
        for _, obj in pairs(simplifiedStore.particles or {}) do
            pcall(function() obj.Enabled = true end)
        end
        if simplifiedStore.globalShadows ~= nil then
            pcall(function() Lighting.GlobalShadows = simplifiedStore.globalShadows end)
        end
        simplifiedStore = {particles = {}, effects = {}}
    end
end

-- Remove lighting effects
local function removeLightingEffects()
    for _, inst in pairs(Lighting:GetChildren()) do
        if inst:IsA("BlurEffect") or inst:IsA("ColorCorrectionEffect") or inst:IsA("BloomEffect")
            or inst:IsA("SunRaysEffect") or inst:IsA("DepthOfFieldEffect") or inst:IsA("ToneMappingEffect") then
            pcall(function() inst.Enabled = false end)
        end
    end
end

-- Loaders: Fly, Marchub, Fling (pcall)
local function execLoadstring(url)
    if not url then return false end
    local ok, res = pcall(function()
        return loadstring(game:HttpGet(url))()
    end)
    return ok, res
end

-- Try to load Rayfield
local Rayfield = nil
do
    local ok, lib = pcall(function()
        return loadstring(game:HttpGet("https://sirius.menu/rayfield"))()
    end)
    if ok and lib then
        Rayfield = lib
    else
        Rayfield = nil
        warn("Rayfield loader failed — using fallback GUI. Allow HttpGet/loadstring to use Rayfield.")
    end
end

-- Build GUI (Rayfield preferred)
if Rayfield then
    local Window = Rayfield:CreateWindow({
        Name = "spy uwu v2",
        LoadingTitle = "spy v2",
        LoadingSubtitle = "Ocean theme",
        Icon = 6023426912,
        Theme = "Ocean",
        ConfigurationSaving = { Enabled = true, FolderName = nil, FileName = "PlayerToolsConfig" },
        ToggleUIKeybind = Enum.KeyCode.K,
    })

    local MainTab = Window:CreateTab("Main", 4483362458)
    local ConfigTab = Window:CreateTab("Config", 4483362458)
    local ExtraTab = Window:CreateTab("Extra", 4483362458)

    -- Main
    local targetLabel = MainTab:CreateLabel("Target: Ninguno")
    local playerInput = MainTab:CreateInput({
        Name = "Target Player (fuzzy)",
        CurrentValue = "",
        PlaceholderText = "nombre o display",
        RemoveTextAfterFocusLost = false,
        Flag = "TargetInput",
        Callback = function(text)
            local p = findPlayer(text)
            if p then pcall(function() targetLabel:Set(("Target: %s  (%s)"):format(p.Name, (p.DisplayName ~= "" and p.DisplayName) and p.DisplayName or p.Name)) end) end
        end,
    })

    MainTab:CreateButton({ Name = "Random Player", Callback = function()
        local arr = {}
        for _, p in pairs(Players:GetPlayers()) do if p ~= LocalPlayer then table.insert(arr, p) end end
        if #arr == 0 then Rayfield:Notify({Title="Random", Content="No other players", Duration=2}); return end
        local pick = arr[math.random(1,#arr)]
        pcall(function() playerInput:Set(pick.Name) end)
        pcall(function() targetLabel:Set(("Target: %s  (%s)"):format(pick.Name, (pick.DisplayName ~= "" and pick.DisplayName) and pick.DisplayName or pick.Name)) end)
    end })

    MainTab:CreateButton({ Name = "Teleport to player", Callback = function()
        stopAll = false
        local target = findPlayer(playerInput.CurrentValue)
        if not target or not target.Character or not target.Character:FindFirstChild("HumanoidRootPart") then Rayfield:Notify({Title="Error", Content="Player not found", Duration=2}); return end
        local hrp = target.Character.HumanoidRootPart
        if LocalPlayer.Character and LocalPlayer.Character.PrimaryPart then pcall(function() LocalPlayer.Character:SetPrimaryPartCFrame(hrp.CFrame) end) elseif LocalPlayer.Character then pcall(function() LocalPlayer.Character:PivotTo(hrp.CFrame) end) end
        pcall(function() targetLabel:Set(("Target: %s  (%s)"):format(target.Name, (target.DisplayName ~= "" and target.DisplayName) and target.DisplayName or target.Name)) end)
    end })

    MainTab:CreateButton({ Name = "Tween to player", Callback = function()
        stopAll = false
        local target = findPlayer(playerInput.CurrentValue)
        if not target or not target.Character or not target.Character:FindFirstChild("HumanoidRootPart") then Rayfield:Notify({Title="Error", Content="Player not found", Duration=2}); return end
        tweenToAllowJump(target.Character.HumanoidRootPart.Position, nil)
        pcall(function() targetLabel:Set(("Target: %s  (%s)"):format(target.Name, (target.DisplayName ~= "" and target.DisplayName) and target.DisplayName or target.Name)) end)
    end })

    MainTab:CreateButton({ Name = "Walk (path) to player", Callback = function()
        stopAll = false
        local target = findPlayer(playerInput.CurrentValue)
        if not target or not target.Character or not target.Character:FindFirstChild("HumanoidRootPart") then Rayfield:Notify({Title="Error", Content="Player not found", Duration=2}); return end
        walkToPlayer(target, nil)
        pcall(function() targetLabel:Set(("Target: %s  (%s)"):format(target.Name, (target.DisplayName ~= "" and target.DisplayName) and target.DisplayName or target.Name)) end)
    end })

    MainTab:CreateButton({ Name = "Spectate player", Callback = function()
        local target = findPlayer(playerInput.CurrentValue)
        if not target or not target.Character then Rayfield:Notify({Title="Error", Content="Player or character not found", Duration=2}); return end
        local hum = target.Character:FindFirstChildOfClass("Humanoid")
        if hum then spectating = true; Workspace.CurrentCamera.CameraSubject = hum; Workspace.CurrentCamera.CameraType = Enum.CameraType.Custom; pcall(function() targetLabel:Set(("Target: %s  (%s)"):format(target.Name, (target.DisplayName ~= "" and target.DisplayName) and target.DisplayName or target.Name)) end) end
    end })

    MainTab:CreateButton({ Name = "Stop everything", Callback = function() stopEverything(); Rayfield:Notify({Title="Stopped", Content="All actions halted", Duration=2}) end })

    MainTab:CreateToggle({ Name = "Noclip", CurrentValue = false, Flag = "NoclipFlag", Callback = function(v) setNoclip(v) end })

    -- Config: sliders
    local walkSlider = ConfigTab:CreateSlider({ Name = "WalkSpeed", Range = {0,200}, Increment = 1, Suffix = "ws", CurrentValue = 16, Flag = "CFG_WalkSpeed" })
    local jumpSlider = ConfigTab:CreateSlider({ Name = "JumpPower", Range = {0,300}, Increment = 1, Suffix = "jp", CurrentValue = 50, Flag = "CFG_JumpPower" })
    local tweenSlider = ConfigTab:CreateSlider({ Name = "Tween Speed", Range = {0,1000}, Increment = 1, Suffix = "tp", CurrentValue = 220, Flag = "CFG_TweenSpeed" })
    pathSlider = ConfigTab:CreateSlider({ Name = "Path WalkSpeed", Range = {0,200}, Increment = 1, Suffix = "pws", CurrentValue = 16, Flag = "CFG_PathWalkSpeed" })

    -- Extra tab
    ExtraTab:CreateToggle({ Name = "Freeze self", CurrentValue = false, Flag = "Extra_Freeze", Callback = function(v) setFreeze(v) end })
    ExtraTab:CreateSlider({ Name = "Camera FOV", Range = {1,120}, Increment = 1, CurrentValue = (Workspace.CurrentCamera and Workspace.CurrentCamera.FieldOfView) or 70, Flag = "Extra_FOV", Callback = function(val) pcall(function() if Workspace.CurrentCamera then Workspace.CurrentCamera.FieldOfView = val end end) end })
    ExtraTab:CreateSlider({ Name = "Camera Zoom Max", Range = {12,500}, Increment = 1, CurrentValue = LocalPlayer.CameraMaxZoomDistance or 400, Flag = "Extra_ZoomMax", Callback = function(val) pcall(function() LocalPlayer.CameraMaxZoomDistance = val end) end })
    ExtraTab:CreateButton({ Name = "Remove Lighting Effects", Callback = function() removeLightingEffects(); Rayfield:Notify({Title="Effects", Content="Disabled common lighting effects", Duration=2}) end })
    ExtraTab:CreateToggle({ Name = "Simplify for FPS", CurrentValue = false, Flag = "Extra_Simplify", Callback = function(v) setSimplify(v) end })

    -- Screen color buttons
    ExtraTab:CreateButton({ Name = "Original Screen", Callback = function()
        local _, cf = createColorGui()
        if cf then cf.Visible = false end
    end })
    ExtraTab:CreateButton({ Name = "White Screen", Callback = function()
        local _, cf = createColorGui()
        if cf then cf.BackgroundColor3 = Color3.fromRGB(255,255,255); cf.Visible = true end
    end })
    ExtraTab:CreateButton({ Name = "Black Screen", Callback = function()
        local _, cf = createColorGui()
        if cf then cf.BackgroundColor3 = Color3.fromRGB(0,0,0); cf.Visible = true end
    end })
    ExtraTab:CreateButton({ Name = "Red Screen", Callback = function()
        local _, cf = createColorGui()
        if cf then cf.BackgroundColor3 = Color3.fromRGB(255,0,0); cf.Visible = true end
    end })

    -- External loaders
    ExtraTab:CreateButton({ Name = "Execute Fly", Callback = function()
        local ok, _ = execLoadstring("https://raw.githubusercontent.com/XNEOFF/FlyGuiV3/main/FlyGuiV3.txt")
        if not ok then Rayfield:Notify({Title="Fly", Content="Failed to execute Fly", Duration=2}) end
    end })
    ExtraTab:CreateButton({ Name = "Execute Marchub", Callback = function()
        local ok, _ = execLoadstring("https://raw.githubusercontent.com/92e8gh9ergwegnixc/loaderss/refs/heads/main/new%20loader.lua")
        if not ok then Rayfield:Notify({Title="Marchub", Content="Failed to execute Marchub", Duration=2}) end
    end })
    ExtraTab:CreateButton({ Name = "Execute Fling GUI", Callback = function()
        local ok, _ = execLoadstring("https://zopium.neocities.org/files_dont_mind_this/flingguithishasalreadybeendonebefore.txt")
        if not ok then Rayfield:Notify({Title="Fling GUI", Content="Failed to execute Fling GUI", Duration=2}) end
    end })

    -- Apply WalkSpeed / JumpPower from sliders each frame
    RunService.RenderStepped:Connect(function()
        local char = LocalPlayer.Character
        if char then
            local humanoid = char:FindFirstChildOfClass("Humanoid")
            if humanoid then
                -- only apply sliders when not walking (path) and not frozen and not spectating
                if not walking and not frozenState and (not spectating) then
                    local ok1, ws = pcall(function() return tonumber(walkSlider.CurrentValue) end)
                    local ok2, jp = pcall(function() return tonumber(jumpSlider.CurrentValue) end)
                    local finalWS = (ok1 and ws) and ws or 16
                    local finalJP = (ok2 and jp) and jp or 50
                    pcall(function()
                        humanoid.WalkSpeed = finalWS
                        pcall(function() humanoid.UseJumpPower = true end)
                        humanoid.JumpPower = finalJP
                    end)
                end
            end
        end
    end)

    pcall(function() Rayfield:LoadConfiguration() end)
    warn("Player Tools (Rayfield - Ocean) loaded (fixed).")
else
    -- Fallback GUI (simple but includes requested features)
    local pg = LocalPlayer:WaitForChild("PlayerGui")
    local mainGui = Instance.new("ScreenGui")
    mainGui.Name = "PlayerTools_Fallback"
    mainGui.ResetOnSpawn = false
    mainGui.Parent = pg

    local frame = Instance.new("Frame", mainGui)
    frame.Size = UDim2.new(0,260,0,520)
    frame.Position = UDim2.new(0,10,0,40)
    frame.BackgroundColor3 = Color3.fromRGB(12,74,110) -- oceano-ish
    frame.BorderSizePixel = 0

    local title = Instance.new("TextLabel", frame)
    title.Size = UDim2.new(1,0,0,30)
    title.Position = UDim2.new(0,0,0,0)
    title.BackgroundTransparency = 1
    title.Text = "Player Tools (fallback)"
    title.TextColor3 = Color3.fromRGB(245,245,245)
    title.Font = Enum.Font.SourceSansBold
    title.TextSize = 16

    local input = Instance.new("TextBox", frame)
    input.Size = UDim2.new(0,240,0,28)
    input.Position = UDim2.new(0,10,0,36)
    input.PlaceholderText = "target player"
    input.Text = ""

    local y = 76
    local function addBtn(text, cb)
        local b = Instance.new("TextButton", frame)
        b.Size = UDim2.new(0,240,0,28)
        b.Position = UDim2.new(0,10,0,y)
        b.Text = text
        b.BackgroundColor3 = Color3.fromRGB(20,100,140)
        b.TextColor3 = Color3.fromRGB(245,245,245)
        b.Font = Enum.Font.SourceSans
        b.MouseButton1Click:Connect(cb)
        y = y + 34
        return b
    end

    addBtn("Random Player", function()
        local arr = {}
        for _, p in pairs(Players:GetPlayers()) do if p ~= LocalPlayer then table.insert(arr,p) end end
        if #arr == 0 then return end
        local pick = arr[math.random(1,#arr)]
        input.Text = pick.Name
    end)

    addBtn("Teleport", function()
        local target = findPlayer(input.Text)
        if not target or not target.Character or not target.Character:FindFirstChild("HumanoidRootPart") then return end
        local hrp = target.Character.HumanoidRootPart
        if LocalPlayer.Character and LocalPlayer.Character.PrimaryPart then pcall(function() LocalPlayer.Character:SetPrimaryPartCFrame(hrp.CFrame) end) elseif LocalPlayer.Character then pcall(function() LocalPlayer.Character:PivotTo(hrp.CFrame) end) end
    end)

    addBtn("Tween", function()
        local target = findPlayer(input.Text)
        if not target or not target.Character or not target.Character:FindFirstChild("HumanoidRootPart") then return end
        tweenToAllowJump(target.Character.HumanoidRootPart.Position, 220)
    end)

    addBtn("Walk", function()
        local target = findPlayer(input.Text)
        if not target then return end
        walkToPlayer(target, 16)
    end)

    addBtn("Spectate", function()
        local target = findPlayer(input.Text)
        if not target or not target.Character then return end
        local hum = target.Character:FindFirstChildOfClass("Humanoid")
        if hum then Workspace.CurrentCamera.CameraSubject = hum; Workspace.CurrentCamera.CameraType = Enum.CameraType.Custom end
    end)

    addBtn("Stop", function() stopEverything() end)
    addBtn("Toggle Noclip", function() setNoclip(not noclipEnabled) end)
    addBtn("Toggle Freeze", function() setFreeze(not frozenState) end)
    addBtn("White Screen", function() local _, cf = createColorGui(); if cf then cf.BackgroundColor3 = Color3.new(1,1,1); cf.Visible = true end end)
    addBtn("Black Screen", function() local _, cf = createColorGui(); if cf then cf.BackgroundColor3 = Color3.new(0,0,0); cf.Visible = true end end)
    addBtn("Red Screen", function() local _, cf = createColorGui(); if cf then cf.BackgroundColor3 = Color3.new(1,0,0); cf.Visible = true end end)
    addBtn("Clear Screen", function() local _, cf = createColorGui(); if cf then cf.Visible = false end end)

    addBtn("Execute Fly", function()
        pcall(function() loadstring(game:HttpGet("https://raw.githubusercontent.com/XNEOFF/FlyGuiV3/main/FlyGuiV3.txt"))() end)
    end)
    addBtn("Execute Marchub", function()
        pcall(function() loadstring(game:HttpGet("https://raw.githubusercontent.com/92e8gh9ergwegnixc/loaderss/refs/heads/main/new%20loader.lua"))() end)
    end)
    addBtn("Execute Fling GUI", function()
        pcall(function() loadstring(game:HttpGet("https://zopium.neocities.org/files_dont_mind_this/flingguithishasalreadybeendonebefore.txt"))() end)
    end)

    warn("Rayfield unavailable — fallback GUI created (Ocean-ish colors).")
end

-- Ensure UseJumpPower is enabled on spawn and reapply some states
Players.LocalPlayer.CharacterAdded:Connect(function(char)
    task.wait(0.1)
    local humanoid = char:FindFirstChildOfClass("Humanoid")
    if humanoid then
        pcall(function() humanoid.UseJumpPower = true end)
    end
end)
